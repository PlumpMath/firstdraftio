We present a library for Haskell using Glasgow Haskell Compiler (GHC) that enables serialization and deserialization of values. The serialization is done by traversing the heap and is transparent to users of the library. Custom data types can be serialized with no extra code.
The goal of the library is to create a platform that makes it easy to create programs for distributed computing.
Currently there are two main ways serialization is approached in distributed Haskell platforms. First is runtime support where the GHC runtime system is modified to allow serialization of values. This is the approach taken by Eden. The other approach is explicit serialization. This approach is used by Cloud Haskell and HdpH. These use Template Haskell to support serialization of functions. Both approaches has their downsides. The problem with the first is that a modified runtime system creates a big hassle for end-users because they need to install the modified GHC version. The problem with the second approach is that users need to write more code to convert value to serializable types and often there is also restrictions on the types of values that can be serialized.

This library is based on the serialization support in the modified runtime system of Eden. When given a heap object to serialize it starts by packing the objectin a pacing buffer. It then continues with all the heap objects that the object depend on.

A limitiation of this approach is that it is only possible to deserialize objects in the exact same binary executable as the serialized value came from since it can contain pointers to static values in the executable.

For this project we have taken the serialization code from the modified runtime system of Eden and extracted it to a library that can be used outside of Eden. The library consists of a thin Haskell wrapper around some primitives written in C. 

Something about the test program...